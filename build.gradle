apply plugin: "java"
apply plugin: "eclipse"

// configure maven.org central repository
repositories {
	mavenCentral()
	maven {
		url "https://repository.apache.org/content/repositories/snapshots/"
	}
}
// display list of repositories
repositories.each{ println "repository: ${it.name} ('${it.url}')" }

group = "li.excessive"
version = "1.3.0"

archivesBaseName = "dsc-fs"


sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
			
	// apache tika (content analysis toolkit)
	// ...very nice to extract meta data, cannot write them however
	compile('org.apache.tika:tika-core:1.11')
	compile('org.apache.tika:tika-parsers:1.11')

	// accessing exif, xmp, iptc metadata in read/write mode (see tika)
//	compile('org.apache.commons:commons-imaging:1.0-SNAPSHOT')
//	compile('com.adobe.xmp:xmpcore:5.1.2')
//	compile('com.drewnoakes:metadata-extractor:2.6.2')

	// sqlite jdbc driver
//	compile('org.xerial:sqlite-jdbc:3.8.11.2')
	
	// virtual filesystem
//	compile('org.apache.commons:commons-vfs2:2.0')	
		
	// logging facade...
	// TODO: add logging bridge for commons-logging etc that might be used by dependencies such as tika...
	compile('org.slf4j:slf4j-api:1.7.5')
	// ...bind to log4j2 for testing
	testCompile('org.apache.logging.log4j:log4j-slf4j-impl:2.5')
	testCompile('org.apache.logging.log4j:log4j-api:2.5')
	testCompile('org.apache.logging.log4j:log4j-core:2.5')
	
	testCompile('junit:junit:4.11')
}

tasks.withType(Test) {
	testLogging {
		// set options for log level LIFECYCLE
		events "passed", "skipped", "failed", "standardOut"
		showExceptions true
		exceptionFormat "short"
		showCauses true
		showStackTraces true

		// set options for log level DEBUG and INFO
		debug {
			events "started", "passed", "skipped", "failed", "standardOut", "standardError"
			exceptionFormat "full"
		}
		info.events = debug.events
		info.exceptionFormat = debug.exceptionFormat

		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}


jar {
	manifest {
		attributes(
			"Implementation-Title": project.name, 
			"Implementation-Version": project.version,
			"Implementation-Vendor": "excessive.li",
			"Class-Path": configurations.runtime.collect { 
				it.getName() 
			}.join(' ')
		)
	}
}



